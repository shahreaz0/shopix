import { JwtPayload, VerifyOptions } from 'jsonwebtoken';
export interface TokenValidatorOptions {
    cache?: boolean;
    cacheMaxAge?: number;
    jwksUri: string;
}
export interface ValidateTokenOptions extends VerifyOptions {
    allowedTenants?: string[];
    idtyp?: string;
    roles?: string[];
    scp?: string[];
    ver?: string;
}
export interface EntraJwtPayload extends JwtPayload {
    idtyp?: string;
    roles?: string[];
    scp?: string[];
    ver?: string;
}
export declare class TokenValidator {
    private client;
    private cacheWrapper;
    /**
     * Constructs a new instance of TokenValidator.
     * @param {Object} options Configuration options for the TokenValidator.
     * @param {boolean} [options.cache=true] Whether to cache the JWKS keys.
     * @param {number} [options.cacheMaxAge=86400000] The maximum age of the cache in milliseconds (default is 24 hours).
     * @param {string} options.jwksUri The URI to fetch the JWKS keys from.
     * @throws {Error} If the options parameter is not provided.
     */
    constructor(options: TokenValidatorOptions);
    /**
     * Validates a JWT token.
     * @param {string} token The JWT token to validate.
     * @param {import('jsonwebtoken').VerifyOptions & { complete?: false } & { idtyp?: string, ver?: string, scp?: string[], roles?: string[] }} [options] Validation options.
     * @property {string[]} [options.allowedTenants] The allowed tenants for the JWT token. Compared against the 'tid' claim.
     * @property {string} [options.idtyp] The expected value of the 'idtyp' claim in the JWT token.
     * @property {string[]} [options.roles] Roles expected in the 'roles' claim in the JWT token.
     * @property {string[]} [options.scp] Scopes expected in the 'scp' claim in the JWT token.
     * @property {string} [options.ver] The expected value of the 'ver' claim in the JWT token.
     * @returns {Promise<import('jsonwebtoken').JwtPayload | string>} The decoded and verified JWT token.
     * @throws {Error} If the token is invalid or the validation fails.
     */
    validateToken(token: string, options?: ValidateTokenOptions): Promise<EntraJwtPayload>;
    private static validateIdtyp;
    private static validateVer;
    private static validateScopesAndRoles;
    private static validateAllowedTenants;
    /**
     * Clears the cache used by the TokenValidator.
     */
    clearCache(): void;
    /**
     * Deletes a key from the cache.
     * @param {string} kid The key ID to delete from the cache.
     */
    deleteKey(kid: string): void;
    private getSigningKey;
    private updateIssuer;
}
